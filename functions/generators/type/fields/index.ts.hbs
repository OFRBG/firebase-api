// @format
import {pick} from 'lodash';
import {GraphQLString, GraphQLNonNull, GraphQLID{{#if depends}}, GraphQLList{{/if~}} } from 'graphql';

{{#if depends}}
import {retrieveType} from '../../../Types/registry';

const /* OtherType */ = retrieveType(/* otherType */);

{{/if}}
/* Every item should have an ID */
const id = {
  type: GraphQLNonNull(GraphQLID),
  description: '{{ properCase name }} ID',
};

/* Search arg version of ID */
const searchId = {
  type: GraphQLID,
  description: 'ID of {{ lowerCase name }} to fetch',
};

{{#if depends}}
/* These are the properties for dependent fields */
const dependency = {
  write : {
    type: GraphQLList(GraphQLID), /* Insert as list even if it's only one */
    description: /* Description of this dependency */,
    collection: /* OtherType */.collectionName,
    useSubcollection: false
  },
  read: /* OtherType */.connection(/* path to array of ids */),
};

{{/if}}
/* contentType data string */
const contentType = {
  type: GraphQLString,
  description: 'Content type',
};

/* These are the properties that may be written */
export const writable = { {{~#if depends}}
  dependency: dependency.write,{{/if}}
};

/* These are the properties that may be read */
export const readable = {
  id,
  contentType,{{#if depends}}
  dependency: dependency.read,{{/if}}
};

/* These are the properties that may be used as queries
 * e.g. {{ collectionName }}(id: 4242)
 */
export const args = {
  ...pick(readable, []),
  id: searchId,
};
